Functional requirements:
   1) User Registration and profile creation
   2) Sending emails with attachements 
   3) Set preferences for emails
   4) Search emails
   5) Tagging
   6) Spam and virus detection
   7) contacts and groups
   8) Implementing service registry and proxies -> This is common for all system designs using Microservices architectures

Questions need to ask:
    1) what is the maximum size of an attachement
    2) what is the maximum size of contacts in group
    3) No of users in a day/ how many mails per user?
    4) what is the average size of mail

Identify the Microservices:
     1) Profile service
     2) User authentication/Autherization service
     3) EmailService
     4) SearchService
     5) Spamdetection Service
     6) VirusScannerService
     7) ContactMangaementService
     8) PreferencesService
     9) ServiceRegistry

ServiceRegistry:
   We need gateway to receive external requests and route it to correct internal services.
   Whenever a service is switched on it register itself to ServiceRegistry.So the registry maps
   the method to service. We also need to implement functionality to check if otherservices or 
   operational or not.

   Components required:
              Distributed gateway : it blocks malicious IPaddresses, routes external requests, Translate HTTP to other protocols
              ServiceManager : It keeps the registry, maps methods to handlers
              DistributedCache : Since mapping does not change freequently we can store the mapping in cache.

AuthService: 
             We need authservice to authenticate the user with username and password.
             We also need profile service to register new user.
             It also updates the cache whenever the userinforation is updated.
             It also checks whether the user is verified or not. using SMS code

MessageService: to Send OTP message through SMS or Email. It also maintains SMS templates

ProfileService : It handles User profile, create/update/delete operations

    Database: For profile service -> it stores all userinfo
              For Auth service ->  it store name, encrypted password, onetime code, usersecret code which is used to authenticate the user
              For Message servcie -> it store message templates
    Distributed cache:  User token is stored in distributed cache. Instead of making a call to Authservice everytime ,
    we can make a call to Cache  which is more efficient.
    
   InMemory cache vs Distributed cache:
            we need to write additional code for inmemory cache. we also need to allocate additional memory.
            If the servcie is distributed service , updating cache requires updating multiple nodes which results fanout.
            In memory cache required process call , But global cache requires Network call.
            In this scenario Global cache is better as our servcie is distributed service.

EmalService: It sends/Receive email from same or different domains.
             
MessageQueueService: It receives email from EmailService and send it to SpamDetector, VirusScanner & SearchService

SearchService: It maps keywords in emails to their locations. It creates inverted indexes.

PreferenceService: It pulls emails from MessageQueue and assigns preferences to emails

SpamDetector Service: It checks the subject and contents of the email and to determine the spam.
                      It checks the email in regular intervals or whenever there is a new email.

VirusDetectorService: It checks the contents and attachements of email for any virus.

ContactManager: It pulls processed emails from Queue and maps sender and receiver.

SMTPServer: It sends emails to external server

IMAPServer : It receives emails from external server.


APIContracts:
   GatewayService: voidBlockIPaddress(IPAddress,endPoints[], duration)

   ServiceManager:  voidRegister(service, ipAddress[], endPoints[])
                    Service routeRequest(service, request, apiEndpoint, user)

    AuthServcie :
                  void register(userName, password, phoneNumber)
                  void login(username, password)
                  token verify(username, otp)
                  bool authenticateUser(userName, token)
                  void logout(username, token)

  MessageService:
                    voidSendSMS(receiver, smstemplate, params[], sendingService)
  ProfileService:
                    void createProfile(username, profilePictureURL, DOB, Gender)
                    void updateProfile(username, profile)
                    void deleteProfile(username)
                    getProfile(username)

 DriveService:

             void uploadFile(file, directory,accessControlList, uploaer)
             boolean deleteFile(file, directory)
             File getFile(filenName, Directory, user, requestngActor)
             File[] getFiles(fileNames[], user, requestingActor)

Contacts Service:
               void createContact(sender, receiver)
               void deleteContact(sender, receiver)
               Group createGroup(creator, members, name, groupPhotoURL)
               void addMembers(groupID, user, members)
               void updateGroup(groupID, user, groupName, groupPhotoURL)
               User[] getUsersWithRoles(groupID, roles)

EmailService:

              Email sendEmail(sender, receiver, content, attachments)
              void deleteEmail(requesterID, emailID)
              Email getEmails(receiver)
              Attachments[] getEmailAttachement(emailID, requester)

Search Engine service:
               Email[] search(searchParams)

Database design:
   Email table
      emailID   Integer
      sender    String
      Receiver  String
      subject   String
      timeStamp  timestamp

  EmailAttachements
       emailID   Integer
       Content   String
       Attachements boolean

  EmailTags
        emailID   Integer
         Tags     Array<Strings>

  SearchEngine Database
       Keywords   String
       EmailIDs    Array<String>

User
    username string
    Password  string
    phoneNumber String
    verfied   Boolean

UserAuthentication
        userName String
        secretCode String
        timestamp   timestamp

SMS
  Sender  String
  Receiver String
  content  String

SMSTemplate
   Type   String
   content String

ServiceManager
     service  String
     endpoints String





 


   








              
              
        
         



    
