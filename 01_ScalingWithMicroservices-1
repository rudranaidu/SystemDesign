 We can use following points to explain how we can scale microservices architecture

Database Layer: Use a combination of databases depending on the data requirements of each service.
	RDBMS
		UserSensitive and timesensitive and high consistency -> use RDBMS like userdata, toll data, payment data etc
		Scalability:User replication and Sharding to scaleout the relational DB
	NoSQL Databases:
		Use Cases: Logging, user preferences, notifications, audit logs, etc.
	        Scalability: Use NoSQL databases like MongoDB, Cassandra, or DynamoDB for horizontally scalable data storage.
	
    MessageQs : We can use Qs in the scenarios where don’t block the core transaction flow.
				Use Kafka for handling high-throughput, real-time event processing
				RabbitMQ for reliable message delivery when the order of events matters (e.g., payment notifications)

  API Gateway & ServiceDiscovery:
        Use Service discovery like Zookeeper or Eureka or Consul to allow microservices to find each other. this is required to avoid
		the hardcoding of their locations to access.
		
		APIGateway (ZUUL)is to manage the external access to application. It acts as load balancer, authentication purpose
		request routing
		
     AWS S3 or Azure Blob Storage: use these storges for backup and recovery
  
  Load Balancing and Autoscaling:
	   Use loadbalancer for evenly distribute load across multiple services (AWS Elastic Load Balancer, NGINX)
	   Autoscaling for to automatically adjust to traffic demands.
	   
	Fault Tolerance and High Availability: 
		Ensure high availability by deploying services across multiple regions or availability zones. This minimizes downtime 
                and ensures the system can recover quickly from failures.
		Use replication for databases and geo-distributed databases for global consistency (e.g., Cassandra or Google Spanner).	
    
	Monitoring and Alerting:
	Integrate monitoring tools (e.g., Prometheus, Grafana, AWS CloudWatch, Datadog) to monitor the health of microservices,
        database performance, and message queues.
	Set up alerts for important events like service failures, message queue bottlenecks, or database load spikes.
	
	Distributed Transactions and Consistency:
		Use distributed transactions with techniques like Saga Patterns to handle long-running processes 
                that span multiple microservices (e.g., toll calculation → payment → receipt generation).
		Ensure eventual consistency for non-critical operations using asynchronous messaging
                 (for example, if a notification is delayed, the system can still function).
  Caching for High Performance:
		Use in-memory caching (e.g., Redis, Memcached) to store frequently accessed data (e.g., toll station rates, vehicle types) for fast lookup and to reduce database load.

       User circuit breaker patter to avoid failures and graceful shout down of system.
       Circuit breaker pattern provides fallback mechansim to avoid falures. 





In a microservices architecture, the API Gateway typically sits before the load balancer. The flow looks something like this:

Client (Browser, Mobile App, etc.) makes a request.
The API Gateway receives the client’s request. 
The API Gateway forwards the request to a Load Balancer, which distributes traffic across multiple instances of a 
service (based on availability or load).
The Load Balancer routes the request to the appropriate Microservice instance.
The Microservice processes the request and returns a response, which flows back through the Load Balancer, 
API Gateway, and finally, to the Client.

Every microserice has its own load balancer.

How API Gateway do authentication?
  It intercepts the HTTP header and checks for JWT token if we want to authenticate with JWT.
  API Gateway must be configured to validate JWT tokens.
		You need to specify:
		The JWT provider (authentication service).
		The public key or secret to validate the JWT signature.
		Token expiration validation.

The simplest config is maintain .httpasswd file in NGNIX 

How to configure Basic Authentication (Username/Password)

Clients send their credentials (username and password) in the HTTP Authorization header using Base64 encoding.
The API Gateway verifies the credentials against a user store (e.g., a database or LDAP server).

Configuration:
Configure the API Gateway to verify credentials by connecting to a user store (e.g., a database or an authentication service).
Enable TLS/SSL to secure the transmission of credentials.

Example:
Using Nginx API Gateway: You can enable basic authentication by storing credentials in an .htpasswd file.
