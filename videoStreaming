Functional Requirements:
     1) Video transformations
     2) Video storage
     3) Transport video to enduser
     4) User Profiles and Preferences
     5) Search and Discovery of Videos
     6) User Comments and Ratings
     7) Subscription and Payment Integration
     8) Recommendation System

Questions to ask?
	What types of videos will be supported (e.g., live streaming, on-demand)?
	What is the expected user base and concurrency?
	What is the expected average video duration and quality (resolution, bitrate)?
	Are there any geographic restrictions on content delivery?
	What are the storage and bandwidth requirements?
	How will video content be monetized (e.g., subscription, ads)?
	How will user engagement be measured and analyzed?
	Is there any requirement for content moderation and censorship?

Identified Microservices:

	User Management Service
	Authentication Service
	Video Upload Service
	Video Encoding Service
	Video Storage Service
	Video Retrieval Service
	Video Streaming Service
	User Profile Service
	Search Service
	Recommendation Service
	Commenting Service
	Rating Service
	Subscription Service
	Payment Integration Service

Flow:
1. Video Ingestion:
	Users upload videos to the Video Upload Service through the user interface.
	The Video Upload Service receives the video files and stores them temporarily.
	Once uploaded, the Video Upload Service triggers a job to the Video Encoding Service for transcoding.
2. Video Encoding:
	The Video Encoding Service listens for incoming jobs from the Video Upload Service.
	It assigns tasks to available encoding workers for transcoding videos into different resolutions and codecs.
	Each worker processes the assigned tasks and encodes the videos accordingly.
	Once encoding is complete, the workers store the transcoded videos in the Distributed File System (DFS).
	After encoding, the Video Encoding Service publishes an event to a message queue indicating that the encoding task is completed.
3. Video Publication:
	The Video Retrieval Service listens for events from the message queue indicating the completion of encoding tasks.
	Upon receiving the event, the Video Retrieval Service retrieves the transcoded videos from the DFS.
	It then publishes another event to the message queue indicating that the videos are ready for streaming.
4. Video Streaming:
	The Video Streaming Service subscribes to events from the message queue indicating the availability of videos for streaming.
	Upon receiving the event, the Video Streaming Service retrieves the videos from the DFS.
	It then streams the videos to end-users in real-time using protocols like HTTP Live Streaming (HLS) or Dynamic Adaptive Streaming over HTTP (DASH).
	Users can access the streamed videos through the user interface of the application.
5. Additional Services:
	The User Management Service and Authentication Service handle user registration, authentication, and authorization.
	The User Profile Service manages user profiles and preferences.
	The Search Service enables users to search for videos based on keywords, tags, or categories.
	The Recommendation Service provides personalized video recommendations to users.
	The Commenting Service allows users to comment on videos.
	The Rating Service enables users to rate videos.
	The Subscription Service manages user subscriptions to channels or content creators.
	The Payment Integration Service handles payment processing for premium content or subscriptions.

Flow Summary:
Users upload videos to the application.
Uploaded videos are transcoded into different resolutions and codecs by the Video Encoding Service.
Transcoded videos are stored in the Distributed File System.
Events are published to indicate the completion of encoding tasks and availability of videos for streaming.
The Video Streaming Service streams the videos to end-users.
Additional services handle user management, authentication, profile management, search, recommendation, commenting, rating, subscription, and payment integration.

API Contracts:

User Management Service: createUser(), updateUser(), getUser()
Authentication Service: authenticateUser(), generateToken(), verifyToken()
Video Upload Service: uploadVideo(), getUploadStatus()
Video Encoding Service: encodeVideo(), getEncodingStatus()
Video Storage Service: storeVideo(), retrieveVideo()
Video Retrieval Service: getRecommendedVideos(), searchVideos()
Video Streaming Service: streamVideo(), pauseVideo(), seekVideo()
User Profile Service: getUserProfile(), updateUserProfile()
Search Service: searchVideos(), filterVideos()
Recommendation Service: getRecommendedVideos(), updateRecommendations()
Commenting Service: addComment(), deleteComment(), getComments()
Rating Service: rateVideo(), getVideoRating()
Subscription Service: subscribeUser(), unsubscribeUser(), getSubscriptions()
Payment Integration Service: processPayment(), verifyPayment()

Database Design:

User table: userID, username, email, password, role
Video table: videoID, title, description, duration, resolution, bitrate, uploadTime
UserVideo table: userID, videoID, watchedTime, progress
Comment table: commentID, videoID, userID, content, timestamp
Rating table: ratingID, videoID, userID, ratingValue, timestamp
Subscription table: subscriptionID, userID, subscribedUserID, subscriptionType, startDate, endDate
Payment table: paymentID, userID, paymentAmount, paymentStatus, paymentDate

Capacity Estimate:

1) Howmuch video will need to be processed per livestream

Let us assume that resolutions we want to serve are 1080P,720P, 480P,360P
Let us also assume that encoding of these videos is h264

A cricket match lasts for approximately 10 hours.
A 2 hrs HD movie size is 2 GB and hence we assume that cricket match size would be 10GB

Raw video will be broken into segments and each segment will be processed
into multiple resolutions and codecs.

1080P resolution will be about =  10GB
720P footage will be about 10/2 = 5 GB
480P footage will be about 10/4 = 2.5 GB
360p footage will be about 10/8 = 1.25GB

Total 18.75 GB
Let use assume we have 4 codecs
18.75 * 4 = 75 GB


2) Howmuch data will be tranformed from CDN to users in single livestream?

Assume no of users watching match is 10 millions users
Assume that 50% of users having HD videos and 50% users having mobile devices
For 10hrs match we required 10 GB data. On average user watch 50% live stream
Total datatransfer = sum of ( 50%HD Devices + 50% mobile devices) * 50/100
= ( 50/100 * 10^6 * 10GB + 2.5 GB* 50/100*10^6) * 50/100
=   3.125 PB

3) Howmuch time would it take to send data from event to users device?

   For watching cricket match 10 hrs 10 GB data
   Data Rate:

   10GB=10×1024MB=10240MB.
   10 hours = 36000 seconds.
   10240MB ≈0.284MB/s=284KB/s.

Latency Components:
Video upload latency: 150ms for 3 KB data.
Geographical server to CDN: 150ms for 3 KB data.
CDN to end user's device: 1second for 3 KB data.
